// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TasteRecipe.Data.Context;

#nullable disable

namespace TasteRecipe.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TasteRecipe.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TasteRecipe.Models.CategoryToRecipe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_category_to_recipe");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RecipeId");

                    b.ToTable("CategoryToRecipes");
                });

            modelBuilder.Entity("TasteRecipe.Models.Favourite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_favourites");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("TasteRecipe.Models.Illustration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_illustrations");

                    b.HasIndex("RecipeId");

                    b.ToTable("Illustrations");
                });

            modelBuilder.Entity("TasteRecipe.Models.Ingredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id")
                        .HasName("pk_ingredients");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("TasteRecipe.Models.IngridientToRecipe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("AmountIngredients")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("pk_ingridient_to_recipe");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("IngridientToRecipes");
                });

            modelBuilder.Entity("TasteRecipe.Models.Recipe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<int[]>("EnergyValue")
                        .HasColumnType("integer[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("Time")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_recipes");

                    b.HasIndex("AuthorId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("TasteRecipe.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TasteRecipe.Models.CategoryToRecipe", b =>
                {
                    b.HasOne("TasteRecipe.Models.Category", "Category")
                        .WithMany("CategoriesToRecipes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("category_to_recipe_category_fk");

                    b.HasOne("TasteRecipe.Models.Recipe", "Recipe")
                        .WithMany("CategoriesToRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("category_to_recipe_recipe_fk");

                    b.Navigation("Category");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("TasteRecipe.Models.Favourite", b =>
                {
                    b.HasOne("TasteRecipe.Models.Recipe", "Recipe")
                        .WithMany("Favourites")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("favourites_recipe_fk");

                    b.HasOne("TasteRecipe.Models.User", "User")
                        .WithMany("Favourites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("favourites_user_fk");

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TasteRecipe.Models.Illustration", b =>
                {
                    b.HasOne("TasteRecipe.Models.Recipe", "Recipe")
                        .WithMany("Illustrations")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("illustrations_recipe_fk");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("TasteRecipe.Models.IngridientToRecipe", b =>
                {
                    b.HasOne("TasteRecipe.Models.Ingredient", "Ingredient")
                        .WithMany("IngridientsToRecipes")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ingridient_to_recipe_ingredient_fk");

                    b.HasOne("TasteRecipe.Models.Recipe", "Recipe")
                        .WithMany("IngridientsToRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ingridient_to_recipe_recipe_fk");

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("TasteRecipe.Models.Recipe", b =>
                {
                    b.HasOne("TasteRecipe.Models.User", "Author")
                        .WithMany("Recipes")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("recipes_author_fk");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TasteRecipe.Models.Category", b =>
                {
                    b.Navigation("CategoriesToRecipes");
                });

            modelBuilder.Entity("TasteRecipe.Models.Ingredient", b =>
                {
                    b.Navigation("IngridientsToRecipes");
                });

            modelBuilder.Entity("TasteRecipe.Models.Recipe", b =>
                {
                    b.Navigation("CategoriesToRecipes");

                    b.Navigation("Favourites");

                    b.Navigation("Illustrations");

                    b.Navigation("IngridientsToRecipes");
                });

            modelBuilder.Entity("TasteRecipe.Models.User", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
